// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: task_service/services.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("task_service/services.proto", fileDescriptor_5fc1ae02c8860a9c) }

var fileDescriptor_5fc1ae02c8860a9c = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x49, 0x2c, 0xce,
	0x8e, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x87, 0xd2, 0xc5, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x2c, 0x20, 0x49, 0x29, 0x71, 0x14, 0x25, 0x20, 0x0e, 0x44, 0xda, 0xe8, 0x37,
	0x23, 0x17, 0x77, 0x48, 0x62, 0x71, 0x76, 0x30, 0x44, 0x4a, 0x48, 0x8d, 0x8b, 0xcd, 0xb9, 0x28,
	0x35, 0xb1, 0x24, 0x55, 0x88, 0x57, 0x0f, 0xac, 0x0c, 0x24, 0x19, 0x94, 0x5a, 0x2c, 0x85, 0xc2,
	0x2d, 0x14, 0x52, 0xe1, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0xf1, 0x84, 0xb8, 0x20, 0x32, 0x4e, 0x95,
	0x9e, 0x29, 0xe8, 0xaa, 0x94, 0xb9, 0xd8, 0x42, 0x0b, 0x52, 0x30, 0x4c, 0x2b, 0x94, 0x82, 0xea,
	0xf1, 0x4d, 0x2d, 0x2e, 0x16, 0x52, 0xe0, 0x62, 0x73, 0x49, 0xcd, 0x49, 0x2d, 0x49, 0x45, 0x31,
	0x09, 0x59, 0x85, 0x16, 0x17, 0xb7, 0x4f, 0x66, 0x71, 0x89, 0x7f, 0x59, 0x6a, 0x51, 0x4a, 0x29,
	0x5c, 0x19, 0x48, 0x4a, 0x8a, 0x1f, 0xc2, 0x06, 0x49, 0x83, 0xcc, 0x2e, 0x16, 0xd2, 0xe6, 0xe2,
	0x80, 0x3a, 0xac, 0x58, 0x88, 0x0f, 0x66, 0x5e, 0x68, 0x71, 0x6a, 0x91, 0x67, 0x0a, 0x86, 0x62,
	0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6,
	0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0xb0, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x83, 0xff,
	0x9c, 0xdd, 0x54, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	Create(ctx context.Context, in *TaskRes, opts ...grpc.CallOption) (*TaskReq, error)
	GetTask(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TaskReq, error)
	Update(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*Mess, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Mess, error)
	ListOverdue(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*ListTasks, error)
	GetTasks(ctx context.Context, in *ByUserId, opts ...grpc.CallOption) (*ListTasks, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Create(ctx context.Context, in *TaskRes, opts ...grpc.CallOption) (*TaskReq, error) {
	out := new(TaskReq)
	err := c.cc.Invoke(ctx, "/task.TaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *ById, opts ...grpc.CallOption) (*TaskReq, error) {
	out := new(TaskReq)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/task.TaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/task.TaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListOverdue(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*ListTasks, error) {
	out := new(ListTasks)
	err := c.cc.Invoke(ctx, "/task.TaskService/ListOverdue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTasks(ctx context.Context, in *ByUserId, opts ...grpc.CallOption) (*ListTasks, error) {
	out := new(ListTasks)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	Create(context.Context, *TaskRes) (*TaskReq, error)
	GetTask(context.Context, *ById) (*TaskReq, error)
	Update(context.Context, *TaskReq) (*Mess, error)
	Delete(context.Context, *ById) (*Mess, error)
	ListOverdue(context.Context, *Mess) (*ListTasks, error)
	GetTasks(context.Context, *ByUserId) (*ListTasks, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) Create(ctx context.Context, req *TaskRes) (*TaskReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTaskServiceServer) GetTask(ctx context.Context, req *ById) (*TaskReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedTaskServiceServer) Update(ctx context.Context, req *TaskReq) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTaskServiceServer) Delete(ctx context.Context, req *ById) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedTaskServiceServer) ListOverdue(ctx context.Context, req *Mess) (*ListTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOverdue not implemented")
}
func (*UnimplementedTaskServiceServer) GetTasks(ctx context.Context, req *ByUserId) (*ListTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Create(ctx, req.(*TaskRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Update(ctx, req.(*TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListOverdue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListOverdue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/ListOverdue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListOverdue(ctx, req.(*Mess))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasks(ctx, req.(*ByUserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TaskService_Create_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskService_Delete_Handler,
		},
		{
			MethodName: "ListOverdue",
			Handler:    _TaskService_ListOverdue_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskService_GetTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_service/services.proto",
}
