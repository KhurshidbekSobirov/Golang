// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user_service/services.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("user_service/services.proto", fileDescriptor_7d6f0b2b44e91180) }

var fileDescriptor_7d6f0b2b44e91180 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x2d, 0x4e, 0x2d,
	0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x87, 0xd2, 0xc5, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x2c, 0x20, 0x49, 0x29, 0x71, 0x14, 0x25, 0x20, 0x0e, 0x44, 0xda, 0xe8, 0x0c,
	0x13, 0x17, 0x77, 0x68, 0x71, 0x6a, 0x51, 0x30, 0x44, 0x4a, 0x48, 0x8d, 0x8b, 0xcd, 0xb9, 0x28,
	0x35, 0xb1, 0x24, 0x55, 0x88, 0x57, 0x0f, 0xac, 0x0c, 0x24, 0x19, 0x94, 0x5a, 0x2c, 0x85, 0xc2,
	0x2d, 0x14, 0x52, 0xe1, 0x62, 0x77, 0x4f, 0x2d, 0x01, 0xf1, 0x84, 0xb8, 0x20, 0x32, 0x4e, 0x95,
	0x9e, 0x29, 0xe8, 0xaa, 0x94, 0xb9, 0xd8, 0x42, 0x0b, 0x52, 0x30, 0x4c, 0x2b, 0x94, 0x82, 0xea,
	0xf1, 0x4d, 0x2d, 0x2e, 0x16, 0x52, 0xe0, 0x62, 0x73, 0x49, 0xcd, 0x49, 0x2d, 0x49, 0x45, 0x31,
	0x09, 0x59, 0x85, 0x3a, 0x17, 0xa7, 0x4f, 0x66, 0x31, 0xd8, 0xb6, 0x62, 0x21, 0x24, 0x09, 0x29,
	0x3e, 0x08, 0x1b, 0x26, 0x29, 0xa4, 0xc9, 0xc5, 0xe5, 0x9c, 0x91, 0x9a, 0x9c, 0xed, 0x96, 0x99,
	0x9a, 0x93, 0x22, 0xc4, 0x0f, 0x91, 0x05, 0x8b, 0xa4, 0x65, 0xe6, 0xa0, 0x9a, 0xa9, 0xcb, 0xc5,
	0xe5, 0x9e, 0x5a, 0xe2, 0x54, 0xe9, 0x9a, 0x9b, 0x98, 0x99, 0x23, 0x24, 0x00, 0x91, 0x01, 0x8b,
	0xa4, 0x82, 0x44, 0xd0, 0x7d, 0xa2, 0xca, 0xc5, 0x16, 0x5c, 0x98, 0xe3, 0x84, 0x30, 0x35, 0xb8,
	0x30, 0x27, 0x29, 0x27, 0x05, 0x14, 0x32, 0x48, 0xa6, 0x3a, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xc3,
	0xd9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x11, 0xdb, 0xfc, 0x66, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	Create(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserReq, error)
	GetUser(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserReq, error)
	Update(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Mess, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Mess, error)
	ListUsers(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*ListUser, error)
	CheckField(ctx context.Context, in *Checkfild, opts ...grpc.CallOption) (*Mess, error)
	GetByEmail(ctx context.Context, in *GetByemail, opts ...grpc.CallOption) (*UserReq, error)
	SqlBld(ctx context.Context, in *SqlbldRes, opts ...grpc.CallOption) (*Mess, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserReq, error) {
	out := new(UserReq)
	err := c.cc.Invoke(ctx, "/user.UserService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserReq, error) {
	out := new(UserReq)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/user.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/user.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *Mess, opts ...grpc.CallOption) (*ListUser, error) {
	out := new(ListUser)
	err := c.cc.Invoke(ctx, "/user.UserService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckField(ctx context.Context, in *Checkfild, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/user.UserService/CheckField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByEmail(ctx context.Context, in *GetByemail, opts ...grpc.CallOption) (*UserReq, error) {
	out := new(UserReq)
	err := c.cc.Invoke(ctx, "/user.UserService/GetByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SqlBld(ctx context.Context, in *SqlbldRes, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/user.UserService/SqlBld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	Create(context.Context, *UserRes) (*UserReq, error)
	GetUser(context.Context, *ById) (*UserReq, error)
	Update(context.Context, *UserReq) (*Mess, error)
	Delete(context.Context, *ById) (*Mess, error)
	ListUsers(context.Context, *Mess) (*ListUser, error)
	CheckField(context.Context, *Checkfild) (*Mess, error)
	GetByEmail(context.Context, *GetByemail) (*UserReq, error)
	SqlBld(context.Context, *SqlbldRes) (*Mess, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Create(ctx context.Context, req *UserRes) (*UserReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *ById) (*UserReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) Update(ctx context.Context, req *UserReq) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedUserServiceServer) Delete(ctx context.Context, req *ById) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedUserServiceServer) ListUsers(ctx context.Context, req *Mess) (*ListUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedUserServiceServer) CheckField(ctx context.Context, req *Checkfild) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckField not implemented")
}
func (*UnimplementedUserServiceServer) GetByEmail(ctx context.Context, req *GetByemail) (*UserReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (*UnimplementedUserServiceServer) SqlBld(ctx context.Context, req *SqlbldRes) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SqlBld not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*UserRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*Mess))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checkfild)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/CheckField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckField(ctx, req.(*Checkfild))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByemail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByEmail(ctx, req.(*GetByemail))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SqlBld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlbldRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SqlBld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/SqlBld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SqlBld(ctx, req.(*SqlbldRes))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "CheckField",
			Handler:    _UserService_CheckField_Handler,
		},
		{
			MethodName: "GetByEmail",
			Handler:    _UserService_GetByEmail_Handler,
		},
		{
			MethodName: "SqlBld",
			Handler:    _UserService_SqlBld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service/services.proto",
}
